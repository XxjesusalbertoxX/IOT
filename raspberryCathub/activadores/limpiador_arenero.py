from repository.consultator import Consultation
from datetime import datetime
import time
import threading

class LimpiadorArenero:
    def __init__(self, id):
        self.id = id
        self.estado = "inactivo"
        self.ultima_limpieza = None
        self.total_limpiezas = 0
        self.motor_activo = False
        self.tiempo_limpieza_estandar = 30  # segundos
        self.intervalo_minimo_minutos = 60  # M√≠nimo 1 hora entre limpiezas
        
    def limpiar(self, duracion_segundos=None):
        """Ejecutar ciclo completo de limpieza"""
        try:
            if self.motor_activo:
                print(f"‚ö†Ô∏è Limpiador {self.id} ya est√° activo")
                return False
            
            # Verificar intervalo m√≠nimo
            if not self._puede_limpiar():
                return False
            
            duracion = duracion_segundos or self.tiempo_limpieza_estandar
            
            if duracion > 300:  # M√°ximo 5 minutos
                print(f"‚ö†Ô∏è Duraci√≥n demasiado larga: {duracion}s (m√°ximo 300s)")
                return False
            
            print(f"üßπ Iniciando limpieza del arenero (duraci√≥n: {duracion}s)...")
            self.estado = "limpiando"
            self.motor_activo = True
            
            # Fases de limpieza
            success = self._ejecutar_fases_limpieza(duracion)
            
            if success:
                self.total_limpiezas += 1
                self.ultima_limpieza = datetime.now()
                self.estado = "limpieza_completada"
                print(f"‚úÖ Limpieza completada exitosamente")
                return True
            else:
                self.estado = "error_limpieza"
                print(f"‚ùå Error durante la limpieza")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en limpiador {self.id}: {e}")
            self.estado = "error"
            return False
        finally:
            self.motor_activo = False
    
    def _puede_limpiar(self):
        """Verificar si puede ejecutar limpieza (intervalo m√≠nimo)"""
        if self.ultima_limpieza is None:
            return True
        
        tiempo_transcurrido = datetime.now() - self.ultima_limpieza
        minutos_transcurridos = tiempo_transcurrido.total_seconds() / 60
        
        if minutos_transcurridos < self.intervalo_minimo_minutos:
            minutos_restantes = int(self.intervalo_minimo_minutos - minutos_transcurridos)
            print(f"‚è∞ Debe esperar {minutos_restantes} minutos antes de la pr√≥xima limpieza")
            return False
        
        return True
    
    def _ejecutar_fases_limpieza(self, duracion_total):
        """Ejecutar las diferentes fases de limpieza"""
        try:
            # Fase 1: Preparaci√≥n y posicionamiento (10% del tiempo)
            fase1_tiempo = int(duracion_total * 0.1)
            print(f"üîß Fase 1: Preparaci√≥n ({fase1_tiempo}s)")
            self.estado = "preparando"
            success = Consultation.activar_actuador(self.id, f"PREPARE:{fase1_tiempo}")
            if not success:
                return False
            time.sleep(fase1_tiempo)
            
            # Fase 2: Tamizado y separaci√≥n (70% del tiempo)
            fase2_tiempo = int(duracion_total * 0.7)
            print(f"üßπ Fase 2: Tamizado ({fase2_tiempo}s)")
            self.estado = "tamizando"
            success = Consultation.activar_actuador(self.id, f"SIFT:{fase2_tiempo}")
            if not success:
                return False
            time.sleep(fase2_tiempo)
            
            # Fase 3: Disposici√≥n de desechos (15% del tiempo)
            fase3_tiempo = int(duracion_total * 0.15)
            print(f"üóëÔ∏è Fase 3: Disposici√≥n ({fase3_tiempo}s)")
            self.estado = "disponiendo"
            success = Consultation.activar_actuador(self.id, f"DISPOSE:{fase3_tiempo}")
            if not success:
                return False
            time.sleep(fase3_tiempo)
            
            # Fase 4: Finalizaci√≥n y reset (5% del tiempo)
            fase4_tiempo = duracion_total - fase1_tiempo - fase2_tiempo - fase3_tiempo
            print(f"üèÅ Fase 4: Finalizando ({fase4_tiempo}s)")
            self.estado = "finalizando"
            success = Consultation.activar_actuador(self.id, f"FINISH:{fase4_tiempo}")
            if not success:
                return False
            time.sleep(fase4_tiempo)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error en fases de limpieza: {e}")
            return False
    
    def limpieza_rapida(self):
        """Ejecutar limpieza r√°pida (15 segundos)"""
        return self.limpiar(15)
    
    def limpieza_profunda(self):
        """Ejecutar limpieza profunda (60 segundos)"""
        return self.limpiar(60)
    
    def detener_emergencia(self):
        """Detener limpieza en caso de emergencia"""
        try:
            Consultation.activar_actuador(self.id, "EMERGENCY_STOP")
            self.motor_activo = False
            self.estado = "detenido_emergencia"
            print(f"üõë Limpiador {self.id} detenido por emergencia")
            return True
        except Exception as e:
            print(f"‚ùå Error deteniendo limpiador: {e}")
            return False
    
    def calibrar_tiempo_limpieza(self, segundos):
        """Calibrar tiempo est√°ndar de limpieza"""
        if 10 <= segundos <= 300:
            self.tiempo_limpieza_estandar = segundos
            print(f"‚öôÔ∏è Tiempo de limpieza calibrado: {segundos}s")
            return True
        else:
            print(f"‚ö†Ô∏è Tiempo inv√°lido: {segundos}s (rango: 10-300)")
            return False
    
    def configurar_intervalo_minimo(self, minutos):
        """Configurar intervalo m√≠nimo entre limpiezas"""
        if 30 <= minutos <= 480:  # Entre 30 minutos y 8 horas
            self.intervalo_minimo_minutos = minutos
            print(f"‚öôÔ∏è Intervalo m√≠nimo configurado: {minutos} minutos")
            return True
        else:
            print(f"‚ö†Ô∏è Intervalo inv√°lido: {minutos} minutos (rango: 30-480)")
            return False
    
    def test_motor(self):
        """Probar funcionamiento del motor brevemente"""
        try:
            print(f"üß™ Probando motor del limpiador {self.id}...")
            self.estado = "probando"
            
            success = Consultation.activar_actuador(self.id, "TEST")
            
            if success:
                self.estado = "funcionando"
                print(f"‚úÖ Motor funcionando correctamente")
                return True
            else:
                self.estado = "error_motor"
                print(f"‚ùå Motor no responde")
                return False
                
        except Exception as e:
            print(f"‚ùå Error probando motor: {e}")
            self.estado = "error_motor"
            return False
    
    def programar_limpieza_automatica(self, horas_intervalo=4):
        """Programar limpieza autom√°tica cada X horas"""
        # Esta funcionalidad ser√≠a implementada en el servicio principal
        print(f"üìÖ Limpieza autom√°tica programada cada {horas_intervalo} horas")
        return True
    
    def obtener_estadisticas_diarias(self):
        """Obtener estad√≠sticas del d√≠a actual"""
        return {
            'total_limpiezas_hoy': self.total_limpiezas,
            'ultima_limpieza': self.ultima_limpieza.isoformat() if self.ultima_limpieza else None,
            'estado_actual': self.estado,
            'motor_activo': self.motor_activo,
            'tiempo_limpieza_estandar': self.tiempo_limpieza_estandar,
            'intervalo_minimo_minutos': self.intervalo_minimo_minutos
        }
    
    def obtener_info_completa(self):
        """Obtener informaci√≥n completa del limpiador"""
        minutos_desde_limpieza = None
        if self.ultima_limpieza:
            tiempo_transcurrido = datetime.now() - self.ultima_limpieza
            minutos_desde_limpieza = int(tiempo_transcurrido.total_seconds() / 60)
        
        return {
            'id': self.id,
            'estado': self.estado,
            'motor_activo': self.motor_activo,
            'total_limpiezas': self.total_limpiezas,
            'ultima_limpieza': self.ultima_limpieza.isoformat() if self.ultima_limpieza else None,
            'minutos_desde_limpieza': minutos_desde_limpieza,
            'puede_limpiar': self._puede_limpiar(),
            'tiempo_limpieza_estandar': self.tiempo_limpieza_estandar,
            'intervalo_minimo_minutos': self.intervalo_minimo_minutos
        }
    
    def __str__(self):
        return f"Limpiador arenero {self.id}: {self.estado} - Total limpiezas: {self.total_limpiezas}"
